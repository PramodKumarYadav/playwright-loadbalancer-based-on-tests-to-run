name: 'Playwright dynamic matrix based on the number of tests to run'
author: 'Pramod Yadav'
description: 'To get dynamic playwright matrix based on the number of tests to run in a workflow run'
# https://docs.github.com/en/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions#branding
branding:
  icon: 'git-merge'
  color: 'yellow'


inputs:
  max-runners:  
    description: 'maximum number of runners to be used'
    required: true
  
  # Example (run all projects): npx playwright test --list    
  pw-cmd-to-list-all-tests:  
    description: 'playwright command to find total tests'
    required: false
    default: 'npx playwright test --list'
  
  # Example (run a single project): npx playwright test --project=chromium --grep=@smoke-test --list 
  pw-cmd-to-list-selected-tests:  
    description: 'playwright command to run tests in this run'
    required: true

outputs:
  dynamic-matrix:
    description: "dynamic matrix to use"
    value: ${{ steps.set-matrix.outputs.dynamic_matrix }}

runs:
  using: "composite"
  steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install project dependencies
        run: npm ci
        shell: bash

      - name: Calculate total shards to use
        id: calculate-total-shards-to-use
        run: |
          MAX_RUNNER_COUNT=${{ inputs.max-runners }}
          echo "MAX_RUNNER_COUNT: $MAX_RUNNER_COUNT"
          # Ensure MAX_RUNNER_COUNT is not zero (sanity check)
          if [ "$MAX_RUNNER_COUNT" -le 0 ]; then
            echo "Error: Max runner count must be a positive number."
            exit 1
          fi

          TOTAL_TEST_CASES_COUNT_FOR_ALL_PROJECTS=$(${{ inputs.pw-cmd-to-list-all-tests }} | grep "Total:" | awk '{print $2}')
          echo "TOTAL_TEST_CASES_COUNT_FOR_ALL_PROJECTS: $TOTAL_TEST_CASES_COUNT_FOR_ALL_PROJECTS"
          # Ensure TOTAL_TEST_CASES_COUNT_FOR_ALL_PROJECTS is not zero (sanity check)
          if [ "$TOTAL_TEST_CASES_COUNT_FOR_ALL_PROJECTS" -eq 0 ]; then
            echo "Error: No test cases found in the repository."
            exit 1
          fi

          # Capture if there is a row for total test cases in the output
          COMMAND_OUTPUT=$(${{ inputs.pw-cmd-to-list-selected-tests }} 2>&1 || true)
          # Check if the output contains the "Total:" line
          if echo "$COMMAND_OUTPUT" | grep -q "Total:"; then
            # Extract the total count if found
            TEST_CASE_COUNT_FOR_THIS_RUN=$(echo "$COMMAND_OUTPUT" | grep "Total:" | awk '{print $2}')
          else
            # Default to 0 if no tests are found
            TEST_CASE_COUNT_FOR_THIS_RUN=0
          fi
          echo "TEST_CASE_COUNT_FOR_THIS_RUN: $TEST_CASE_COUNT_FOR_THIS_RUN"

          RATIO=$(awk "BEGIN {print $TEST_CASE_COUNT_FOR_THIS_RUN / $TOTAL_TEST_CASES_COUNT_FOR_ALL_PROJECTS}")
          echo "RATIO: $RATIO"

          TOTAL_SHARDS=$(awk "BEGIN {print int($RATIO * $MAX_RUNNER_COUNT + 0.999)}")
          echo "TOTAL_SHARDS_AS_CALCULATED: $TOTAL_SHARDS"

          # If there are no modified files, set TOTAL_SHARDS to 1
          if [ "$TOTAL_SHARDS" -eq 0 ]; then
            TOTAL_SHARDS=1
          fi
          echo "TOTAL_SHARDS_TO_USE: $TOTAL_SHARDS"
          echo "TOTAL_SHARDS=$TOTAL_SHARDS" >> $GITHUB_ENV
        shell: bash

      - name: Generate JSON Matrix
        id: set-matrix
        run: |
          MATRIX_JSON="["
          for i in $(seq 1 $TOTAL_SHARDS); do
            if [ $i -gt 1 ]; then
              MATRIX_JSON+=","
            fi
            MATRIX_JSON+="\"$i\""
          done
          MATRIX_JSON+="]"

          echo "Generated matrix: $MATRIX_JSON"
          echo "dynamic_matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
        shell: bash
